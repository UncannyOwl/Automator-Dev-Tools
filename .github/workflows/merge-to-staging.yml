name: Merge PR to Staging

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number to merge to staging'
        required: false
        type: string
      branch_name:
        description: 'Branch name to merge to staging'
        required: false
        type: string
      target_branch:
        description: 'Target branch to merge into (default: staging)'
        required: false
        type: string
        default: 'staging'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to merge to staging'
        required: false
        type: string
      branch_name:
        description: 'Branch name to merge to staging'
        required: false
        type: string
      target_branch:
        description: 'Target branch to merge into (default: staging)'
        required: false
        type: string
        default: 'staging'

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-to-staging:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache GitHub CLI
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/gh
            ~/.cache/gh
          key: ${{ runner.os }}-gh-cli-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gh-cli-

      - name: Setup GitHub CLI
        if: steps.cache-gh.outputs.cache-hit != 'true'
        run: |
          type -p curl >/dev/null || sudo apt-get install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh jq -y

      - name: Run Merge Script
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ inputs.pr_number || github.event.inputs.pr_number }}
          INPUT_BRANCH: ${{ inputs.branch_name || github.event.inputs.branch_name }}
          TARGET_BRANCH: ${{ inputs.target_branch || github.event.inputs.target_branch || 'staging' }}
        run: |
          # Configure git user from PR author or use default
          if [[ -n "$INPUT_PR" ]]; then
            PR_INFO=$(gh pr view "$INPUT_PR" --json author)
            AUTHOR_NAME=$(echo "$PR_INFO" | jq -r '.author.login')
            AUTHOR_EMAIL="$AUTHOR_NAME@users.noreply.github.com"
            git config --global user.name "$AUTHOR_NAME"
            git config --global user.email "$AUTHOR_EMAIL"
          else
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
          fi

          cat <<'EOF' > merge-script.sh
          #!/bin/bash

          set -e

          merge_to_target() {
            local source=$1
            local is_pr=$2

            # First, get the source branch ready
            echo "Setting up source branch: $source"
            git fetch origin "$source"
            git checkout -B "$source" "origin/$source"
            
            # Now get target branch ready
            echo "Setting up target branch: $TARGET_BRANCH"
            git fetch origin "$TARGET_BRANCH"
            git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
            
            # Make sure we have latest changes
            git pull origin "$TARGET_BRANCH"

            # Now merge source into target
            echo "Merging $source into $TARGET_BRANCH..."
            if git merge --no-ff "origin/$source" -m "Merge $source into $TARGET_BRANCH"; then
              git push origin "$TARGET_BRANCH"
              echo "✅ Successfully merged $source into $TARGET_BRANCH"
              
              if [[ "$is_pr" == "true" ]]; then
                gh pr comment "$INPUT_PR" --body "✅ Successfully merged to $TARGET_BRANCH branch"
              fi
              return 0
            else
              echo "❌ Merge conflict detected"
              git merge --abort || true
              
              if [[ "$is_pr" == "true" ]]; then
                gh pr comment "$INPUT_PR" --body "❌ Merge conflict detected. Please resolve conflicts and try again."
              fi
              return 1
            fi
          }

          if [[ -n "$INPUT_PR" ]]; then
            echo "Fetching PR #$INPUT_PR info..."
            pr_info=$(gh pr view "$INPUT_PR" --json headRefName)
            source_branch=$(echo "$pr_info" | jq -r .headRefName)
            merge_to_target "$source_branch" "true"

          elif [[ -n "$INPUT_BRANCH" ]]; then
            merge_to_target "$INPUT_BRANCH" "false"

          else
            echo "Error: Either PR number or branch name must be provided"
            exit 1
          fi
          EOF

          chmod +x merge-script.sh
          ./merge-script.sh 
name: Merge pre-release into open PRs

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number to merge pre-release into (optional)'
        required: false
        type: string
      branch_name:
        description: 'Branch name to merge pre-release into (optional)'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to merge pre-release into (optional)'
        required: false
        type: string
      branch_name:
        description: 'Branch name to merge pre-release into (optional)'
        required: false
        type: string
  schedule:
    - cron: '12 */12 * * *' # every 12 hours

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-pre-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache GitHub CLI
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/gh
            ~/.cache/gh
          key: ${{ runner.os }}-gh-cli-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gh-cli-

      - name: Setup GitHub CLI
        if: steps.cache-gh.outputs.cache-hit != 'true'
        run: |
          type -p curl >/dev/null || sudo apt-get install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh jq -y

      - name: Run Merge Script
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ inputs.pr_number || github.event.inputs.pr_number }}
          INPUT_BRANCH: ${{ inputs.branch_name || github.event.inputs.branch_name }}
        run: |
          # Configure git user from PR author or use default
          if [[ -n "$INPUT_PR" ]]; then
            PR_INFO=$(gh pr view "$INPUT_PR" --json author)
            AUTHOR_NAME=$(echo "$PR_INFO" | jq -r '.author.login')
            AUTHOR_EMAIL="$AUTHOR_NAME@users.noreply.github.com"
            git config --global user.name "$AUTHOR_NAME"
            git config --global user.email "$AUTHOR_EMAIL"
          else
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
          fi

          cat <<'EOF' > merge-script.sh
          #!/bin/bash

          set -e

          merge_into_branch() {
            local branch=$1
            local pr_number=$2

            # Setup pre-release branch
            echo "Setting up pre-release branch"
            git fetch origin pre-release
            git checkout -B pre-release origin/pre-release

            # Setup target branch
            echo "Setting up target branch: $branch"
            git fetch origin "$branch"
            git checkout -B "$branch" "origin/$branch"

            # Merge pre-release into target
            echo "Merging pre-release into $branch"
            if git merge --no-ff origin/pre-release -m "Auto-merged pre-release into $branch"; then
              git push origin "$branch"
              echo "✅ Successfully merged pre-release into $branch"
              return 0
            else
              echo "❌ Merge conflict detected in $branch"
              git merge --abort || true
              if [ -n "$pr_number" ]; then
                gh pr comment "$pr_number" --body "⚠️ Merge conflict: Please resolve conflicts with pre-release manually."
              fi
              return 1
            fi
          }

          if [[ -n "$INPUT_PR" ]]; then
            echo "Fetching PR #$INPUT_PR info..."
            pr_info=$(gh pr view "$INPUT_PR" --json headRefName)
            head_ref=$(echo "$pr_info" | jq -r .headRefName)
            merge_into_branch "$head_ref" "$INPUT_PR"

          elif [[ -n "$INPUT_BRANCH" ]]; then
            merge_into_branch "$INPUT_BRANCH"

          else
            # Set git config for automated PR processing
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"

            echo "Fetching open PRs..."
            prs=$(gh pr list --state open --json number,headRefName,author --jq '.[] | [.number, .headRefName, .author.login] | @tsv')
            while IFS=$'\t' read -r pr_number head_ref author; do
              echo -e "\nProcessing PR #$pr_number ($head_ref) by $author..."
              # Update git config for each PR author
              git config --global user.name "$author"
              git config --global user.email "$author@users.noreply.github.com"
              
              if merge_into_branch "$head_ref" "$pr_number"; then
                echo "✅ Merged into #$pr_number"
              else
                echo "❌ Conflict in #$pr_number"
              fi
            done <<< "$prs"
          fi
          EOF

          chmod +x merge-script.sh
          ./merge-script.sh
